name: ChefORG CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  quality-assurance:
    runs-on: ubuntu-latest
    name: Quality Assurance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run QA Pipeline
        run: |
          chmod +x ./scripts/qa-pipeline.sh
          ./scripts/qa-pipeline.sh
        continue-on-error: true

      - name: Upload QA Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-reports
          path: |
            /tmp/*_output.log
            test-results/
            coverage/
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run check:types
        continue-on-error: true

      - name: Run lint
        run: npm run check:lint
        continue-on-error: true

      - name: Run tests with coverage
        run: npm run check:test
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start development server
        run: |
          npm run dev &
          sleep 30

      - name: Run Playwright tests
        run: npm run check:e2e
        continue-on-error: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [quality-assurance, build-and-test]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          echo "This would deploy to staging server"
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging"
          # Add smoke test commands here

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [quality-assurance, build-and-test, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create backup
        run: |
          echo "üì¶ Creating backup of current production"
          # Add backup commands here

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment"
          echo "This would deploy to production server"
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on production"
          # Add smoke test commands here

      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment successful"
          # Add notification commands here (Slack, email, etc.)

  rollback:
    runs-on: ubuntu-latest
    name: Rollback Production
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back production deployment"
          echo "This would rollback to previous version"
          # Add rollback commands here

      - name: Verify rollback
        run: |
          echo "‚úÖ Verifying rollback success"
          # Add verification commands here

      - name: Notify rollback
        run: |
          echo "‚ö†Ô∏è Production rollback completed"
          # Add notification commands here
